{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import urllib.request\n",
    "import urllib.parse\n",
    "import json\n",
    "from math import floor\n",
    "import re\n",
    "from collections import Counter\n",
    "from flask import Flask\n",
    "from flask import url_for, render_template, request, redirect"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def detect_id (name):\n",
    "    name=name.lower()\n",
    "    name_right=urllib.parse.quote(name, safe='')\n",
    "    users = set()\n",
    "    req = urllib.request.Request('https://api.vk.com/method/groups.search?q='+ name_right +'&offset=0&count=20&v=5.23&access_token=021bb0b9933eefa9a4e28dffa66dfeb76ac186baf8d6f4a8e877aded998b913988fdc780667f8b3fe3578')\n",
    "    response = urllib.request.urlopen(req)\n",
    "    result = response.read().decode('utf-8')\n",
    "    data = json.loads(result)\n",
    "    for gr in data['response']['items']:\n",
    "        maybe_name = gr['name']\n",
    "        maybe_name=maybe_name.lower()\n",
    "        if maybe_name==name:\n",
    "            name_group = gr['name']\n",
    "            id_group = str(gr['id'])\n",
    "            break\n",
    "        else:\n",
    "            pass\n",
    "    try:\n",
    "        id_group\n",
    "    except NameError:\n",
    "        id_group=''\n",
    "    return(id_group)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def detect_offsets(id_group):\n",
    "    offsets=[0]\n",
    "    users = set()\n",
    "    req = urllib.request.Request('https://api.vk.com/method/groups.getMembers?group_id='+ id_group +'&v=5.23&offset=0&access_token=021bb0b9933eefa9a4e28dffa66dfeb76ac186baf8d6f4a8e877aded998b913988fdc780667f8b3fe3578')\n",
    "    response = urllib.request.urlopen(req)\n",
    "    result = response.read().decode('utf-8')\n",
    "    data = json.loads(result)\n",
    "    numb_users = data['response']['count']\n",
    "    if numb_users<1000:\n",
    "        pass\n",
    "    else:\n",
    "        thousends=floor(numb_users/1000)\n",
    "        if thousends==1:\n",
    "            offsets.append(1000)\n",
    "            pass\n",
    "        else:\n",
    "            offsets.append(thousends*1000)\n",
    "            if numb_users<3000:\n",
    "                pass\n",
    "            else:\n",
    "                offsets.append(numb_users//2)\n",
    "    return(offsets,numb_users)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def users_data(id_group,offsets):\n",
    "    users=[]\n",
    "    for off in offsets:\n",
    "        req = urllib.request.Request('https://api.vk.com/method/groups.getMembers?group_id='+ id_group +'&v=5.23&offset=' + str(off) + '&count=1000&fields=bdate,city&access_token=021bb0b9933eefa9a4e28dffa66dfeb76ac186baf8d6f4a8e877aded998b913988fdc780667f8b3fe3578')\n",
    "        response = urllib.request.urlopen(req)\n",
    "        result = response.read().decode('utf-8')\n",
    "        data = json.loads(result)\n",
    "        for user_data in data['response']['items']:\n",
    "            users.append(user_data)\n",
    "    return (users)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def users_ages (users):\n",
    "    users_years=0\n",
    "    numb_users_with_age=0\n",
    "    for user in users:\n",
    "        if 'bdate' in user:\n",
    "            bdate_user=user['bdate'].split('.')\n",
    "            if len(bdate_user)==3:\n",
    "                age_user=2018-int(bdate_user[2])\n",
    "                users_years=users_years+age_user\n",
    "                numb_users_with_age+=1\n",
    "            else:\n",
    "                pass\n",
    "    mid_age=users_years/numb_users_with_age\n",
    "    mid_age=round(mid_age)\n",
    "    return(mid_age)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def users_cities(users,numb_users):\n",
    "    users_city={}\n",
    "    for user in users:\n",
    "        if 'city' in user:\n",
    "            city_user=user['city']['title']\n",
    "            if city_user in users_city:\n",
    "                users_city[city_user]+=1\n",
    "            else:\n",
    "                users_city[city_user]=1\n",
    "    users_city_sort=sorted(users_city.items(), key=lambda item: item[1], reverse=True)\n",
    "    if numb_users<2000:    \n",
    "        good_cities=str(users_city_sort)\n",
    "        good_cities=good_cities.replace('(', '')\n",
    "        good_cities=good_cities.replace('),', '\\n')\n",
    "        result_city='Так как в сообществе менее 2000 участников, вот список всех городов, где проживают участники сообщества'+ '\\n' + good_cities\n",
    "    else:\n",
    "        most_popular=[]\n",
    "        most_popular=str(users_city_sort[:15])\n",
    "        most_popular_cities=str(re.findall('\\'[А-Яа-я]*\\'', most_popular))\n",
    "        most_popular_cities=re.sub('\\\"','', most_popular_cities)\n",
    "        most_popular_cities=re.sub('\\'','', most_popular_cities)\n",
    "        most_popular_cities=re.sub(',','\\n', most_popular_cities)\n",
    "        result_city='Так как в сообществе более 2000 участников, вот список городов, где проживает большинство участников (в порядке убывания):'+ '\\n' + str(most_popular_cities)\n",
    "    return(result_city)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def posts(id_group):\n",
    "    texts_posts=[]\n",
    "    posts_id=[]\n",
    "    id_group_new='-'+ id_group\n",
    "    req = urllib.request.Request('https://api.vk.com/method/wall.get?owner_id='+ id_group_new +'&v=5.23&offset=0&count=15&filter=all&access_token=021bb0b9933eefa9a4e28dffa66dfeb76ac186baf8d6f4a8e877aded998b913988fdc780667f8b3fe3578')\n",
    "    response = urllib.request.urlopen(req)\n",
    "    result = response.read().decode('utf-8')\n",
    "    data = json.loads(result)\n",
    "    for el in data['response']['items']:\n",
    "        posts_id.append(el['id'])\n",
    "        if el['text'] != '':\n",
    "            texts_posts.append(el['text'])\n",
    "        else:\n",
    "            pass\n",
    "    clear_texts_post=str(texts_posts)\n",
    "    clear_texts_post=re.sub('[\\.,\\?!\\'\\)\\(:;]','', clear_texts_post)\n",
    "    clear_texts_post=re.sub('\\d','', clear_texts_post)\n",
    "    clear_texts_post=re.sub(' +',' ', clear_texts_post)\n",
    "    count_post=clear_texts_post.split(' ')\n",
    "    count_post=Counter(count_post)\n",
    "    count_post = dict(count_post)\n",
    "    count_post_sort=sorted(count_post.items(), key=lambda item: item[1], reverse=True)\n",
    "    count_post_sort_50=count_post_sort[:50]\n",
    "    if len(count_post_sort)<10:\n",
    "        popular_words_post='В данном сообществе нет текста постов'\n",
    "    else:\n",
    "        popular_words_post=[]\n",
    "        for i in count_post_sort_50:\n",
    "            if len(i[0])<4:\n",
    "                pass\n",
    "            else:\n",
    "                popular_words_post.append(i[0])\n",
    "        popular_words_post=popular_words_post[:10]\n",
    "    return(id_group_new, posts_id, popular_words_post)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def comments(id_group_new, posts_id):\n",
    "    text_comm=[]\n",
    "    for i in posts_id:\n",
    "        req = urllib.request.Request('https://api.vk.com/method/wall.getComments?owner_id='+ id_group_new +'&post_id='+ str(i) +'&v=5.74&count=10&access_token=021bb0b9933eefa9a4e28dffa66dfeb76ac186baf8d6f4a8e877aded998b913988fdc780667f8b3fe3578')\n",
    "        response = urllib.request.urlopen(req)\n",
    "        result = response.read().decode('utf-8')\n",
    "        data = json.loads(result)\n",
    "        try:\n",
    "            for tx in data['response']['items']:\n",
    "                text_comm.append(tx['text'])\n",
    "        except:\n",
    "            pass\n",
    "    clear_texts_com=str(text_comm)\n",
    "    clear_texts_com=re.sub('[\\.,\\?!\\'\\)\\(:;]','', clear_texts_com)\n",
    "    clear_texts_com=re.sub('\\[.*?\\]','', clear_texts_com)\n",
    "    clear_texts_com=re.sub(' +',' ', clear_texts_com)\n",
    "    count_com=clear_texts_com.split(' ')\n",
    "    count_com=Counter(count_com)\n",
    "    count_com = dict(count_com)\n",
    "    count_com_sort=sorted(count_com.items(), key=lambda item: item[1], reverse=True)\n",
    "    count_com_sort_50=count_com_sort[:50]\n",
    "    if len(count_com_sort)<10:\n",
    "        popular_words_comm='В данном сообществе нет комментариев'\n",
    "    else:\n",
    "        popular_words_com=[]\n",
    "        for i in count_com_sort_50:\n",
    "            if len(i[0])<4:\n",
    "                pass\n",
    "            else:\n",
    "                popular_words_com.append(i[0])\n",
    "        popular_words_comm=popular_words_com[:10]\n",
    "    return (popular_words_comm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\n",
      "127.0.0.1 - - [16/Jun/2018 19:17:03] \"GET / HTTP/1.1\" 200 -\n",
      "127.0.0.1 - - [16/Jun/2018 19:17:13] \"GET /result?name=%D0%B0%D0%B4%D0%BC%D0%B5 HTTP/1.1\" 200 -\n"
     ]
    }
   ],
   "source": [
    "app = Flask(__name__)\n",
    "\n",
    "@app.route('/')\n",
    "def form():   \n",
    "    return render_template('form.html')\n",
    "\n",
    "@app.route('/result')\n",
    "def result():\n",
    "    if request.args:\n",
    "        name = request.args['name']\n",
    "        id_group=detect_id (name)\n",
    "        if id_group=='':\n",
    "            name=name+', однако мы его не смогли найти'\n",
    "            numb_users='нет'\n",
    "            mid_age='неизвестен'\n",
    "            result_city=''\n",
    "            popular_words_post='неизвестно'\n",
    "            popular_words_comm='неизвестно'\n",
    "        else:    \n",
    "            print(id_group)\n",
    "            offsets=detect_offsets(id_group)[0]\n",
    "            numb_users=detect_offsets(id_group)[1]\n",
    "            print(offsets)\n",
    "            print(numb_users)\n",
    "            users=users_data(id_group,offsets)\n",
    "            print(len(users))\n",
    "            mid_age=users_ages(users)\n",
    "            print(mid_age)\n",
    "            result_city=users_cities(users,numb_users)\n",
    "            print(result_city)\n",
    "            id_group_new=posts(id_group)[0]\n",
    "            posts_id=posts(id_group)[1]\n",
    "            popular_words_post=posts(id_group)[2]\n",
    "            print(id_group_new) \n",
    "            print (posts_id)\n",
    "            print(popular_words_post)\n",
    "            popular_words_comm=comments(id_group_new, posts_id)\n",
    "            print(popular_words_comm)\n",
    "        return render_template('result.html', name=name, numb_users=numb_users, mid_age=mid_age, result_city=result_city,popular_words_post=popular_words_post, popular_words_comm=popular_words_comm)\n",
    "    return render_template('result.html')\n",
    "\n",
    "        \n",
    "if __name__ == '__main__':\n",
    "    app.run(debug=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python [conda root]",
   "language": "python",
   "name": "conda-root-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
